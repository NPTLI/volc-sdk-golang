// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: live/business/stream_manage.proto

package business

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StreamInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`                            //流ID
	Vhost            string `protobuf:"bytes,2,opt,name=Vhost,proto3" json:"Vhost,omitempty"`                       // 域名空间名称
	Domain           string `protobuf:"bytes,3,opt,name=Domain,proto3" json:"Domain,omitempty"`                     // 域名
	App              string `protobuf:"bytes,4,opt,name=App,proto3" json:"App,omitempty"`                           // 应用名称
	Stream           string `protobuf:"bytes,5,opt,name=Stream,proto3" json:"Stream,omitempty"`                     // 流名称
	SessionStartTime string `protobuf:"bytes,6,opt,name=SessionStartTime,proto3" json:"SessionStartTime,omitempty"` // 开始推流时间
	OnlineUser       int64  `protobuf:"varint,7,opt,name=OnlineUser,proto3" json:"OnlineUser,omitempty"`            // 在线人数
	BandWidth        int64  `protobuf:"varint,8,opt,name=BandWidth,proto3" json:"BandWidth,omitempty"`              // 带宽
	Bitrate          int64  `protobuf:"varint,9,opt,name=Bitrate,proto3" json:"Bitrate,omitempty"`                  // 码率
	Framerate        int64  `protobuf:"varint,10,opt,name=Framerate,proto3" json:"Framerate,omitempty"`             // 帧率
	PreviewURL       string `protobuf:"bytes,11,opt,name=PreviewURL,proto3" json:"PreviewURL,omitempty"`            // 预览地址
}

func (x *StreamInfoList) Reset() {
	*x = StreamInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_business_stream_manage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamInfoList) ProtoMessage() {}

func (x *StreamInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_live_business_stream_manage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamInfoList.ProtoReflect.Descriptor instead.
func (*StreamInfoList) Descriptor() ([]byte, []int) {
	return file_live_business_stream_manage_proto_rawDescGZIP(), []int{0}
}

func (x *StreamInfoList) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *StreamInfoList) GetVhost() string {
	if x != nil {
		return x.Vhost
	}
	return ""
}

func (x *StreamInfoList) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *StreamInfoList) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

func (x *StreamInfoList) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *StreamInfoList) GetSessionStartTime() string {
	if x != nil {
		return x.SessionStartTime
	}
	return ""
}

func (x *StreamInfoList) GetOnlineUser() int64 {
	if x != nil {
		return x.OnlineUser
	}
	return 0
}

func (x *StreamInfoList) GetBandWidth() int64 {
	if x != nil {
		return x.BandWidth
	}
	return 0
}

func (x *StreamInfoList) GetBitrate() int64 {
	if x != nil {
		return x.Bitrate
	}
	return 0
}

func (x *StreamInfoList) GetFramerate() int64 {
	if x != nil {
		return x.Framerate
	}
	return 0
}

func (x *StreamInfoList) GetPreviewURL() string {
	if x != nil {
		return x.PreviewURL
	}
	return ""
}

type ClosedStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vhost     string `protobuf:"bytes,1,opt,name=Vhost,proto3" json:"Vhost,omitempty"`         // Vhost表示视频直播服务的配置空间
	Domain    string `protobuf:"bytes,2,opt,name=Domain,proto3" json:"Domain,omitempty"`       // 域名
	App       string `protobuf:"bytes,3,opt,name=App,proto3" json:"App,omitempty"`             // 应用名称
	Stream    string `protobuf:"bytes,4,opt,name=Stream,proto3" json:"Stream,omitempty"`       // 流名称
	StartTime string `protobuf:"bytes,5,opt,name=StartTime,proto3" json:"StartTime,omitempty"` // 直播流开始时间
	EndTime   string `protobuf:"bytes,6,opt,name=EndTime,proto3" json:"EndTime,omitempty"`     // 直播流结束时间
	// 表示推流方式，缺省情况查询全部推流方式。支持如下取值。
	// <li>push:直推流；
	// <li>relay:回源流。
	SourceType string `protobuf:"bytes,7,opt,name=SourceType,proto3" json:"SourceType,omitempty"`
}

func (x *ClosedStream) Reset() {
	*x = ClosedStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_business_stream_manage_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClosedStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClosedStream) ProtoMessage() {}

func (x *ClosedStream) ProtoReflect() protoreflect.Message {
	mi := &file_live_business_stream_manage_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClosedStream.ProtoReflect.Descriptor instead.
func (*ClosedStream) Descriptor() ([]byte, []int) {
	return file_live_business_stream_manage_proto_rawDescGZIP(), []int{1}
}

func (x *ClosedStream) GetVhost() string {
	if x != nil {
		return x.Vhost
	}
	return ""
}

func (x *ClosedStream) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ClosedStream) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

func (x *ClosedStream) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *ClosedStream) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ClosedStream) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *ClosedStream) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

type ForbiddenStreamInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vhost      string `protobuf:"bytes,1,opt,name=Vhost,proto3" json:"Vhost,omitempty"`           // Vhost表示视频直播服务的配置空间
	Domain     string `protobuf:"bytes,2,opt,name=Domain,proto3" json:"Domain,omitempty"`         // 域名
	App        string `protobuf:"bytes,3,opt,name=App,proto3" json:"App,omitempty"`               // 应用名称
	Stream     string `protobuf:"bytes,4,opt,name=Stream,proto3" json:"Stream,omitempty"`         // 流名称
	CreateTime string `protobuf:"bytes,5,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"` // 直播流开始时间
	EndTime    string `protobuf:"bytes,6,opt,name=EndTime,proto3" json:"EndTime,omitempty"`       // 直播流结束时间
	// 是否禁用。
	// <li>true：禁用；
	// <li>false：启用。
	Type string `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ForbiddenStreamInfoList) Reset() {
	*x = ForbiddenStreamInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_business_stream_manage_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForbiddenStreamInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForbiddenStreamInfoList) ProtoMessage() {}

func (x *ForbiddenStreamInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_live_business_stream_manage_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForbiddenStreamInfoList.ProtoReflect.Descriptor instead.
func (*ForbiddenStreamInfoList) Descriptor() ([]byte, []int) {
	return file_live_business_stream_manage_proto_rawDescGZIP(), []int{2}
}

func (x *ForbiddenStreamInfoList) GetVhost() string {
	if x != nil {
		return x.Vhost
	}
	return ""
}

func (x *ForbiddenStreamInfoList) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ForbiddenStreamInfoList) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

func (x *ForbiddenStreamInfoList) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *ForbiddenStreamInfoList) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ForbiddenStreamInfoList) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *ForbiddenStreamInfoList) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type LiveStreamInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamInfoList []*StreamInfoList `protobuf:"bytes,1,rep,name=StreamInfoList,proto3" json:"StreamInfoList,omitempty"` // 流信息列表
	RoughCount     int64             `protobuf:"varint,2,opt,name=RoughCount,proto3" json:"RoughCount,omitempty"`        // 流数量
}

func (x *LiveStreamInfo) Reset() {
	*x = LiveStreamInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_business_stream_manage_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveStreamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveStreamInfo) ProtoMessage() {}

func (x *LiveStreamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_live_business_stream_manage_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveStreamInfo.ProtoReflect.Descriptor instead.
func (*LiveStreamInfo) Descriptor() ([]byte, []int) {
	return file_live_business_stream_manage_proto_rawDescGZIP(), []int{3}
}

func (x *LiveStreamInfo) GetStreamInfoList() []*StreamInfoList {
	if x != nil {
		return x.StreamInfoList
	}
	return nil
}

func (x *LiveStreamInfo) GetRoughCount() int64 {
	if x != nil {
		return x.RoughCount
	}
	return 0
}

type ClosedStreamInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamInfoList []*ClosedStream `protobuf:"bytes,1,rep,name=StreamInfoList,proto3" json:"StreamInfoList,omitempty"` // 历史流的信息列表
	RoughCount     int64           `protobuf:"varint,2,opt,name=RoughCount,proto3" json:"RoughCount,omitempty"`        // 流数量
}

func (x *ClosedStreamInfo) Reset() {
	*x = ClosedStreamInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_business_stream_manage_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClosedStreamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClosedStreamInfo) ProtoMessage() {}

func (x *ClosedStreamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_live_business_stream_manage_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClosedStreamInfo.ProtoReflect.Descriptor instead.
func (*ClosedStreamInfo) Descriptor() ([]byte, []int) {
	return file_live_business_stream_manage_proto_rawDescGZIP(), []int{4}
}

func (x *ClosedStreamInfo) GetStreamInfoList() []*ClosedStream {
	if x != nil {
		return x.StreamInfoList
	}
	return nil
}

func (x *ClosedStreamInfo) GetRoughCount() int64 {
	if x != nil {
		return x.RoughCount
	}
	return 0
}

type StreamStateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 直播流状态。
	// <li>online：在线流；
	// <li>offline：历史流；
	// <li>forbidden：禁推流。
	StreamState string `protobuf:"bytes,1,opt,name=stream_state,json=streamState,proto3" json:"stream_state,omitempty"`
	// 直播流类型。
	// <li>push：直推直拉；
	// <li>pull：回源拉流。
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *StreamStateInfo) Reset() {
	*x = StreamStateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_business_stream_manage_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamStateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamStateInfo) ProtoMessage() {}

func (x *StreamStateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_live_business_stream_manage_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamStateInfo.ProtoReflect.Descriptor instead.
func (*StreamStateInfo) Descriptor() ([]byte, []int) {
	return file_live_business_stream_manage_proto_rawDescGZIP(), []int{5}
}

func (x *StreamStateInfo) GetStreamState() string {
	if x != nil {
		return x.StreamState
	}
	return ""
}

func (x *StreamStateInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type ForbiddenStreamInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamInfoList []*ForbiddenStreamInfoList `protobuf:"bytes,1,rep,name=StreamInfoList,proto3" json:"StreamInfoList,omitempty"` // 禁推流的信息列表
	RoughCount     int64                      `protobuf:"varint,2,opt,name=RoughCount,proto3" json:"RoughCount,omitempty"`        // 流数量
}

func (x *ForbiddenStreamInfo) Reset() {
	*x = ForbiddenStreamInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_business_stream_manage_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForbiddenStreamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForbiddenStreamInfo) ProtoMessage() {}

func (x *ForbiddenStreamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_live_business_stream_manage_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForbiddenStreamInfo.ProtoReflect.Descriptor instead.
func (*ForbiddenStreamInfo) Descriptor() ([]byte, []int) {
	return file_live_business_stream_manage_proto_rawDescGZIP(), []int{6}
}

func (x *ForbiddenStreamInfo) GetStreamInfoList() []*ForbiddenStreamInfoList {
	if x != nil {
		return x.StreamInfoList
	}
	return nil
}

func (x *ForbiddenStreamInfo) GetRoughCount() int64 {
	if x != nil {
		return x.RoughCount
	}
	return 0
}

var File_live_business_stream_manage_proto protoreflect.FileDescriptor

var file_live_business_stream_manage_proto_rawDesc = []byte{
	0x0a, 0x21, 0x6c, 0x69, 0x76, 0x65, 0x2f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x4c, 0x69, 0x76, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x22, 0xba, 0x02, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x70, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x41, 0x70, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x2a, 0x0a, 0x10, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x42,
	0x61, 0x6e, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x42, 0x61, 0x6e, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x69, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x42, 0x69, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x52, 0x4c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x52,
	0x4c, 0x22, 0xbe, 0x01, 0x0a, 0x0c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x56, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x41, 0x70, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x41,
	0x70, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x17, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x56, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56,
	0x68, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x41, 0x70, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x41, 0x70, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x57, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x69, 0x76,
	0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x6f, 0x75, 0x67, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x52, 0x6f, 0x75, 0x67, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x89, 0x01, 0x0a, 0x10, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x55, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x0e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x52, 0x6f, 0x75, 0x67, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x52, 0x6f, 0x75, 0x67, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x48, 0x0a, 0x0f,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x13, 0x46, 0x6f, 0x72, 0x62, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x60,
	0x0a, 0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x6f, 0x75, 0x67, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x52, 0x6f, 0x75, 0x67, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0xd4, 0x01, 0x0a, 0x2a, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x42,
	0x0c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x50, 0x01, 0x5a,
	0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x6f, 0x6c, 0x63,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x76, 0x6f, 0x6c, 0x63, 0x2d, 0x73, 0x64, 0x6b, 0x2d,
	0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c,
	0x69, 0x76, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0xa0, 0x01, 0x01, 0xd8, 0x01, 0x01, 0xc2, 0x02, 0x00, 0xca, 0x02, 0x21, 0x56,
	0x6f, 0x6c, 0x63, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x4c, 0x69, 0x76, 0x65,
	0x5c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x5c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0xe2, 0x02, 0x24, 0x56, 0x6f, 0x6c, 0x63, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c,
	0x4c, 0x69, 0x76, 0x65, 0x5c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_live_business_stream_manage_proto_rawDescOnce sync.Once
	file_live_business_stream_manage_proto_rawDescData = file_live_business_stream_manage_proto_rawDesc
)

func file_live_business_stream_manage_proto_rawDescGZIP() []byte {
	file_live_business_stream_manage_proto_rawDescOnce.Do(func() {
		file_live_business_stream_manage_proto_rawDescData = protoimpl.X.CompressGZIP(file_live_business_stream_manage_proto_rawDescData)
	})
	return file_live_business_stream_manage_proto_rawDescData
}

var file_live_business_stream_manage_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_live_business_stream_manage_proto_goTypes = []interface{}{
	(*StreamInfoList)(nil),          // 0: Volcengine.Live.Models.Business.StreamInfoList
	(*ClosedStream)(nil),            // 1: Volcengine.Live.Models.Business.ClosedStream
	(*ForbiddenStreamInfoList)(nil), // 2: Volcengine.Live.Models.Business.ForbiddenStreamInfoList
	(*LiveStreamInfo)(nil),          // 3: Volcengine.Live.Models.Business.LiveStreamInfo
	(*ClosedStreamInfo)(nil),        // 4: Volcengine.Live.Models.Business.ClosedStreamInfo
	(*StreamStateInfo)(nil),         // 5: Volcengine.Live.Models.Business.StreamStateInfo
	(*ForbiddenStreamInfo)(nil),     // 6: Volcengine.Live.Models.Business.ForbiddenStreamInfo
}
var file_live_business_stream_manage_proto_depIdxs = []int32{
	0, // 0: Volcengine.Live.Models.Business.LiveStreamInfo.StreamInfoList:type_name -> Volcengine.Live.Models.Business.StreamInfoList
	1, // 1: Volcengine.Live.Models.Business.ClosedStreamInfo.StreamInfoList:type_name -> Volcengine.Live.Models.Business.ClosedStream
	2, // 2: Volcengine.Live.Models.Business.ForbiddenStreamInfo.StreamInfoList:type_name -> Volcengine.Live.Models.Business.ForbiddenStreamInfoList
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_live_business_stream_manage_proto_init() }
func file_live_business_stream_manage_proto_init() {
	if File_live_business_stream_manage_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_live_business_stream_manage_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_business_stream_manage_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClosedStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_business_stream_manage_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForbiddenStreamInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_business_stream_manage_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveStreamInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_business_stream_manage_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClosedStreamInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_business_stream_manage_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamStateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_business_stream_manage_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForbiddenStreamInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_live_business_stream_manage_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_live_business_stream_manage_proto_goTypes,
		DependencyIndexes: file_live_business_stream_manage_proto_depIdxs,
		MessageInfos:      file_live_business_stream_manage_proto_msgTypes,
	}.Build()
	File_live_business_stream_manage_proto = out.File
	file_live_business_stream_manage_proto_rawDesc = nil
	file_live_business_stream_manage_proto_goTypes = nil
	file_live_business_stream_manage_proto_depIdxs = nil
}
